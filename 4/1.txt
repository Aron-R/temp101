PROGRAM 1 EXAMPLE 1
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
printf("Parent process: id is %d",getpid()); 
} 
else if(pid==0) 
{ 
printf("\nChild process: id is %d",getpid()); 
printf("\nMy Parent process: id is %d",getppid()); 
} 
else 
printf("Error"); 
}
PROGRAM 2 EXAMPLE 2
#include<stdio.h> 
#include<stdlib.h> 
#include<sys/types.h> 
#define max 10 
main() 
{ 
pid_t pid; 
int i; 
fork(); 
pid=getpid(); 
for(i=1;i<=max;i++) 
{ 
printf("this line is from pid %d, value= %d\n", pid, i); 
} 
}
PROGRAM 3 EXAMPLE 3
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
printf("Parent process: id is %d",getpid()); 
} 
else if(pid==0) 
{ 
fprintf(stderr,"\nChild process: id is %d",getpid()); 
fprintf(stderr,"\nMy Parent process: id is %d\n",getppid()); 
//char *argv[3]={"","-l",NULL}; 
//execvp("ls",argv); 
execl("/bin/ls","-l",NULL); 
} 
else 
printf("Error"); 
}
PROGRAM 4 FINDING FACTORIAL IN CHILD
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
wait(NULL); 
printf("\nParent process\n"); 
} 
else if(pid==0) 
{
printf("Child process: id is %d",getpid()); 
printf("\nParent process: id is %d",getppid()); 
int n,f=1; 
printf("\nenter the number: "); 
scanf("%d",&n); 
while(n!=0) 
{ 
f=f*n; 
n--; 
} 
printf("factorial is %d",f); 
printf("\nfactorial is found in %d",getpid()); 
} 
else 
printf("Error"); 
}
PROGRAM 5 CREATING A CHILD FROM A CHILD 
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
wait(); 
printf("\nA Process: id is %d",getpid()); 
printf("\nA Parent Process: id is %d",getppid()); 
} 
else if(pid==0) 
{ 
pid=fork(); 
if(pid>0) 
{ 
wait(); 
printf("\nB Process: id is %d",getpid()); 
printf("\nB Parent process: id is %d ",getppid()); 
} 
else if(pid==0) 
{ 
printf("\nC Process: id is %d",getpid()); 
printf("\nC Parent process: id is %d",getppid()); 
} 
else("Error"); 
} 
else 
printf("Error"); 
}
PROGRAM 6 CREATING TWO CHILDREN
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
wait(); 
pid=fork(); 
if(pid>0) 
{ 
wait(); 
printf("\nA Process: id is %d",getpid()); 
printf("\nA Parent Process: id is %d",getppid()); 
} 
else if(pid==0) 
{ 
printf("\nB Process: id is %d",getpid()); 
printf("\nB Parent process: id is %d ",getppid()); 
} 
else 
printf("Error"); 
} 
else if(pid==0) 
{ 
printf("\nC Process: id is %d",getpid()); 
printf("\nC Parent process: id is %d ",getppid()); 
} 
else 
printf("Error"); 
}
PROGRAM 7 EXECUTING TWO PROGRAMS IN TWO CHILD
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<stdio.h> 
main() 
{ 
pid_t pid; 
pid= fork(); 
if(pid>0) 
{ 
wait(); 
pid=fork(); 
if(pid>0) 
{ 
wait(); 
printf("\nA Process: id is %d",getpid()); 
} 
else if(pid==0) 
{ 
printf("\nB Process: id is %d",getpid()); 
printf("\nB Parent process: id is %d ",getppid()); 
execlp("/home/student/fact","fact",NULL); 
} 
else 
printf("Error"); 
} 
else if(pid==0) 
{ 
printf("\nC Process: id is %d",getpid()); 
printf("\nC Parent process: id is %d ",getppid()); 
execlp("/home/student/fib","fib",NULL); 
} 
else 
printf("Error"); 
}
FIBONACCI:
#include<stdio.h> 
main() 
{ 
int n,a=0,b=1,c,i; 
printf("\nenter the terms(fibonacci)"); 
scanf("%d",&n); 
printf("\n%d",a); 
printf("\n%d",b); 
for(i=0;i<(n-1);i++) 
{ 
c=a+b; 
printf("\n%d",c); 
a=b; 
b=c; 
} 
}
FACTORIAL
#include<stdio.h> 
main() 
{ 
int n,fact=1; 
printf("\nenter the number to find factorial"); 
scanf("%d",&n); 
while(n!=0) 
{ 
fact=fact*n; 
n--; 
} 
printf("factorial is %d",fact); 
}
